# To build the image:
# docker build . -t docker.io/nymtech/android-wg-patched -f Dockerfile_AndroidPatchedGoruntime
# To push the image to docker.io:
# docker push docker.io/nymtech/android-wg-patched

FROM debian@sha256:77f46c1cf862290e750e913defffb2828c889d291a93bdd10a7a0597720948fc

RUN apt-get update -y && apt-get install -y \
    curl \
    file \
    gcc \
    git \
    make \
    python \
    unzip

# Install Android NDK
RUN cd /tmp && \
    curl -sf -L -o ndk.zip https://dl.google.com/android/repository/android-ndk-r25c-linux.zip && \
    echo "769ee342ea75f80619d985c2da990c48b3d8eaf45f48783a2d48870d04b46108 ndk.zip" | sha256sum -c - && \
    mkdir /opt/android && \
    cd /opt/android && \
    unzip -q /tmp/ndk.zip && \
    rm /tmp/ndk.zip


ENV ANDROID_NDK_HOME="/opt/android/android-ndk-r25c"
ENV NDK_TOOLCHAIN_DIR="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin"

ENV GOLANG_VERSION=1.23.6
ENV GOLANG_HASH=9379441ea310de000f33a4dc767bd966e72ab2826270e038e78b2c53c2e7802d

# Install Go-lang and patch it to use the appropriate monotonic clock
COPY goruntime-boottime-over-monotonic.diff /opt/goruntime-boottime-over-monotonic.diff
RUN cd /tmp && \
    curl -sf -L -o go.tgz https://go.dev/dl/go${GOLANG_VERSION}.linux-amd64.tar.gz && \
    echo "${GOLANG_HASH} go.tgz" | sha256sum -c - && \
    cd /opt && \
    tar -xzf /tmp/go.tgz && \
    rm /tmp/go.tgz && \
    patch -p1 -f -N -r- -d "/opt/go" < /opt/goruntime-boottime-over-monotonic.diff

ENV PATH=${PATH}:/opt/go/bin
ENV GOROOT=/opt/go
ENV GOPATH=/opt/go-path

RUN apt-get remove -y curl && \
    apt-get autoremove -y

ENTRYPOINT []
