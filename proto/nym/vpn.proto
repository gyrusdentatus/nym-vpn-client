syntax = "proto3";

package nym.vpn;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// Represents the identity of a gateway
message Gateway {
  string id = 1;
}

// Represents a nym-address of the form id.enc@gateway
message Address {
  string nym_address = 1;
}

message Location {
  string two_letter_iso_country_code = 1;
  optional double latitude = 2;
  optional double longitude = 3;
}

message EntryNode {
  oneof entry_node_enum {
    Gateway gateway = 1;
    Location location = 2;
    google.protobuf.Empty random_low_latency = 3;
    google.protobuf.Empty random = 4;
  }
}

message ExitNode {
  oneof exit_node_enum {
    Address address = 1;
    Gateway gateway = 2;
    Location location = 3;
    google.protobuf.Empty random = 4;
  }
}

message MixConnectedStateDetails {
  Address nym_address = 1;
  Address exit_ipr = 2;
  string ipv4 = 3;
  string ipv6 = 4;
}

message WgConnectedStateDetails {
  string entry_ipv4 = 1;
  string exit_ipv4 = 2;
}

message ConnectedStateDetails {
  oneof connected_state_details {
    MixConnectedStateDetails mix = 1;
    WgConnectedStateDetails wg = 2;
  }
}

message Dns {
  string ip = 1;
}

message Url {
  string url = 1;
}

// Inspired by
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent
// Forward slashes '/' are not valid
message UserAgent {
  // Example:
  //    nym-vpn-app
  //    nym-vpnd
  string application = 1;
  // Format: version[-optional] [(daemon version[-optional])]
  // Example:
  //    0.1.8
  //    0.1.8-debug (0.1.6)
  //    0.2.1-fdroid
  string version = 2;
  // Format: OS; OS version; CPU
  // Example:
  //    Windows NT 6.1; Win64; x64
  //    Macintosh; Intel Mac OS X 14.6.1
  //    iPad; U; CPU OS 3_2 like Mac OS X; en-us
  string platform = 3;
  // Format: git hash [(daemon git hash)]
  // Commit hash should be at least 7 characters long
  // Example:
  //    4h9fk59 (4kdufle)
  //    4h9fk59
  string git_commit = 4;
}

message DenomDetails {
  string base = 1;
  string display = 2;
  uint32 display_exponent = 3;
}

message ChainDetails {
  string bech32_account_prefix = 1;
  DenomDetails mix_denom = 2;
  DenomDetails stake_denom = 3;
}

message NymContracts {
  optional string mixnet_contract_address = 1;
  optional string vesting_contract_address = 2;
  optional string ecash_contract_address = 3;
  optional string group_contract_address = 4;
  optional string multisig_contract_address = 5;
  optional string coconut_dkg_contract_address = 6;
}

message NymNetworkDetails {
  string network_name = 1;
  ChainDetails chain_details = 2;
  repeated ValidatorDetails endpoints = 3;
  NymContracts contracts = 4;
}

message NymVpnNetworkDetails {
  Url nym_vpn_api_url = 1;
}

message AccountManagement {
  Url sign_up = 1;
  Url sign_in = 2;
  Url account = 3;
}

message ValidatorDetails {
  Url nyxd_url = 1;
  Url websocket_url = 2;
  Url api_url = 3;
}

message InfoResponse {
  string version = 1;
  google.protobuf.Timestamp build_timestamp = 2;
  string triple = 3;
  string platform = 4;
  string git_commit = 5;
  NymNetworkDetails nym_network = 6;
  NymVpnNetworkDetails nym_vpn_network = 7;
}

message SetNetworkRequest {
  string network = 1;
}

message SetNetworkResponse {
  SetNetworkRequestError error = 1;
}

message SetNetworkRequestError {
  enum SetNetworkRequestErrorType {
    SET_NETWORK_REQUEST_ERROR_TYPE_UNSPECIFIED = 0;

    // Unspecified internal error
    INTERNAL = 1;

    // The network name provided is not valid
    INVALID_NETWORK_NAME = 2;
  }

  SetNetworkRequestErrorType kind = 1;

  // Internal message for logging and debugging
  string message = 2;
}

message SystemMessage {
  string name = 1;
  string message = 2;
  map<string, string> properties = 3;
}

message GetSystemMessagesResponse {
  repeated SystemMessage messages = 1;
}

message GetFeatureFlagsResponse {
  map<string, string> flags = 1;
  map<string, FeatureFlagGroup> groups = 2;
}

message FeatureFlagGroup {
  map<string, string> map = 1;
}

message Threshold {
  uint32 min_performance = 1;
}

message ConnectRequestError {
  enum ConnectRequestErrorType {
    CONNECT_REQUEST_ERROR_TYPE_UNSPECIFIED = 0;

    // Unspecified internal error
    INTERNAL = 1;

    // General error
    GENERAL = 2;

    // No account recovery phrase stored
    NO_ACCOUNT_STORED = 3;

    // No device keys stored
    NO_DEVICE_STORED = 4;

    // Update account failed
    UPDATE_ACCOUNT = 5;

    // Update device failed
    UPDATE_DEVICE = 6;

    // Device registration failed
    REGISTER_DEVICE = 7;

    // Requesting zk-nym failed
    REQUEST_ZK_NYM = 8;
  }

  ConnectRequestErrorType kind = 1;

  // Internal message for logging and debugging
  string message = 2;

  optional string message_id = 3;

  // When we have an error request zk-nyms, this is the set of zk-nym failures
  repeated RequestZkNymError zk_nym_error = 4;
}

message ConnectRequest {
  EntryNode entry = 1;
  ExitNode exit = 2;
  Dns dns = 3;
  bool disable_routing = 4;
  bool enable_two_hop = 5;
  bool netstack = 13;
  bool disable_poisson_rate = 6;
  bool disable_background_cover_traffic = 7;
  bool enable_credentials_mode = 8;
  UserAgent user_agent = 12;
  // Optional thresholds
  Threshold min_mixnode_performance = 9;
  Threshold min_gateway_mixnet_performance = 10;
  Threshold min_gateway_vpn_performance = 11;
}

message ConnectResponse {
  // TODO: consider simplifying by removing the bool
  bool success = 1;
  ConnectRequestError error = 2;
}

message DisconnectResponse {
  bool success = 1;
}

message AsEntry {
  bool can_connect = 1;
  bool can_route = 2;
}

message AsExit {
  bool can_connect = 1;
  bool can_route_ip_v4 = 2;
  bool can_route_ip_v6 = 3;
  bool can_route_ip_external_v4 = 4;
  bool can_route_ip_external_v6 = 5;
}

message WgProbeResult {
  bool can_register = 1;
  bool can_handshake = 2;
  bool can_resolve_dns = 3;
  float ping_hosts_performance = 4;
  float ping_ips_performance = 5;
}

message ProbeOutcome {
  AsEntry as_entry = 1;
  AsExit as_exit = 2;
  WgProbeResult wg = 3;
}

message Probe {
  google.protobuf.Timestamp last_updated_utc = 1;
  ProbeOutcome outcome = 2;
}

message GatewayResponse {
  Gateway id = 1;
  Location location = 2;
  Probe last_probe = 3;
}

enum GatewayType {
  GATEWAY_TYPE_UNSPECIFIED = 0;
  MIXNET_ENTRY = 1;
  MIXNET_EXIT = 2;
  WG = 3;
}

message ListGatewaysRequest {
  GatewayType kind = 1;
  UserAgent user_agent = 4;
  // Optional thresholds
  Threshold min_mixnet_performance = 2;
  Threshold min_vpn_performance = 3;
}

message ListGatewaysResponse {
  repeated GatewayResponse gateways = 1;
}

message ListCountriesRequest {
  GatewayType kind = 1;
  UserAgent user_agent = 4;
  // Optional thresholds
  Threshold min_mixnet_performance = 2;
  Threshold min_vpn_performance = 3;
}

message ListCountriesResponse {
  repeated Location countries = 1;
}

message StoreAccountRequest {
  string mnemonic = 1;
  uint32 nonce = 2;
}

message StoreAccountResponse {
  bool success = 1;
  AccountError error = 2;
}

message IsAccountStoredResponse {
  oneof resp {
    bool is_stored = 1;
    AccountError error = 2;
  }
}

message ForgetAccountResponse {
  bool success = 1;
  AccountError error = 2;
}

message AccountIdentity {
  optional string account_identity = 1;
}

message GetAccountIdentityResponse {
  oneof id {
    AccountIdentity account_identity = 1;
    AccountError error = 2;
  }
}

message GetAccountLinksRequest {
  string locale = 1;
}

message GetAccountLinksResponse {
  oneof res {
    AccountManagement links = 1;
    AccountError error = 2;
  }
}

enum AccountRegistered {
  ACCOUNT_REGISTERED_UNSPECIFIED = 0;
  ACCOUNT_REGISTERED = 1;
  ACCOUNT_NOT_REGISTERED = 2;
}

enum MnemonicState {
  MNEMONIC_STATE_UNSPECIFIED = 0;
  MNEMONIC_STATE_NOT_STORED = 1;
  MNEMONIC_STATE_STORED = 2;
}

enum AccountState {
  ACCOUNT_STATE_UNSPECIFIED = 0;
  ACCOUNT_STATE_NOT_REGISTERED = 1;
  ACCOUNT_STATE_INACTIVE = 2;
  ACCOUNT_STATE_ACTIVE = 3;
  ACCOUNT_STATE_DELETE_ME = 4;
}

enum SubscriptionState {
  SUBSCRIPTION_STATE_UNSPECIFIED = 0;
  SUBSCRIPTION_STATE_NOT_REGISTERED = 1;
  SUBSCRIPTION_STATE_PENDING = 2;
  SUBSCRIPTION_STATE_ACTIVE = 3;
  SUBSCRIPTION_STATE_COMPLETE = 4;
}

message DeviceSummary {
  uint64 active = 1;
  uint64 max = 2;
  uint64 remaining = 3;
}

message AccountSummary {
  AccountState account = 1;
  SubscriptionState subscription = 2;
  DeviceSummary device_summary = 3;
}

enum DeviceState {
  DEVICE_STATE_UNSPECIFIED = 0;
  DEVICE_STATE_NOT_REGISTERED = 1;
  DEVICE_STATE_INACTIVE = 2;
  DEVICE_STATE_ACTIVE = 3;
  DEVICE_STATE_DELETE_ME = 4;
}

message RegisterDeviceResult {
  enum RegisterDeviceResultType {
    REGISTER_DEVICE_RESULT_UNSPECIFIED = 0;
    IN_PROGRESS = 1;
    SUCCESS = 2;
    FAILED = 3;
  }

  RegisterDeviceResultType kind = 1;
  optional string message = 2;
  optional string message_id = 3;
}

// The status of a zk-nym request. A request can have multiple successes
// and failures, depending on how many ticket types were requested.
message RequestZkNymResult {
  enum RequestZkNymResultType {
    REQUEST_ZK_NYM_RESULT_UNSPECIFIED = 0;
    IN_PROGRESS = 1;
    DONE = 4;
    ERROR = 5;
  }

  RequestZkNymResultType kind = 1;
  repeated RequestZkNymSuccess successes = 2;
  repeated RequestZkNymError failures = 3;
}

message RequestZkNymSuccess {
  string id = 1;
}

message RequestZkNymError {
  enum RequestZkNymErrorType {
    REQUEST_ZK_NYM_ERROR_TYPE_UNSPECIFIED = 0;

    // Unspecified internal error
    INTERNAL = 1;

    // General error
    GENERAL = 2;

    // Error returned from the nym-vpn-api endpoint for get the zk-nyms that
    // are available for download or resume.
    GET_ZK_NYMS_AVAILABLE_FOR_DOWNLOAD_ENDPOINT_FAILURE = 9;

    // Failed to create the ecash key pair
    CREATE_ECASH_KEY_PAIR = 10;

    // Failed to construct the withdrawal request
    CONSTRUCT_WITHDRAWAL_REQUEST = 11;

    // Error returned from the nym-vpn-api endpoint
    REQUEST_ZK_NYM_ENDPOINT_FAILURE = 3;

    // The vpn-api response contained an invalid ticket type
    INVALID_TICKET_TYPE_IN_RESPONSE = 12;

    // The vpn-api response contained a ticket type that didn't match the one
    // we requested
    TICKET_TYPE_MISMATCH = 13;

    // Error returned from the nym-vpn-api polling endpoint
    POLL_ZK_NYM_ENDPOINT_FAILURE = 4;

    // The task polling for the result failed
    POLLING_TASK_ERROR = 5;

    // Timeout polling for the result
    POLLING_TIMEOUT = 6;

    // Request finished correctly, but the nym-vpn-api returned an error
    // with the result.
    FINISHED_WITH_ERROR = 7;

    // The vpn-api response is missing the blinded shares
    MISSING_BLINDED_SHARES = 14;

    // The vpn-api response is missing the master verification key
    RESPONSE_HAS_INVALID_MASTER_VERIFICATION_KEY = 15;

    // The vpn-api response has an inconsistent epoch id
    EPOCH_ID_MISMATCH = 16;

    // The vpn-api response has an inconsistent expiration date
    EXPIRATION_DATE_MISMATCH = 17;

    // Error returned from the nym-vpn-api endpoint for getting the partial
    // verification keys
    GET_PARTIAL_VERIFICATION_KEYS_ENDPOINT_FAILURE = 18;

    // Missing the master verification key in storage
    NO_MASTER_VERIFICATION_KEY_IN_STORAGE = 19;

    // Missing coin index signatures in storage
    NO_COIN_INDEX_SIGNATURES_IN_STORAGE = 20;

    // Missing expiration date signatures in storage
    NO_EXPIRATION_DATE_SIGNATURES_IN_STORAGE = 21;

    // The verification key is invalid
    INVALID_VERIFICATION_KEY = 22;

    // Failed to deserialize the blinded signature
    DESERIALIZE_BLINDED_SIGNATURE = 23;

    // Missing index when decoding keys
    DECODED_KEYS_MISSING_INDEX = 24;

    // Failed to import the ticketbook into local storage
    IMPORT = 8;

    // Failed to aggregate the wallets
    AGGREGATE_WALLETS = 25;

    // The error returned from the vpn-api endpoint when confirming the zk-nym
    // download
    CONFIRM_ZK_NYM_DOWNLOAD_ENDPOINT_FAILURE = 26;

    // Error importing the zknym due to the storage missing the pending request data
    MISSING_PENDING_REQUEST = 27;

    // Error removing the pending request from storage
    REMOVE_PENDING_REQUEST = 28;

    // General credential storage error
    CREDENTIAL_STORAGE = 29;

    // The vpn-api response contained an unexpected error
    UNEXPECTED_ERROR_RESPONSE = 30;
  }

  RequestZkNymErrorType kind = 1;
  optional string id = 2;
  optional string ticketbook_type = 3;
  optional string message = 4;
  optional string message_id = 5;
}

message AccountStateSummary {
  optional MnemonicState mnemonic = 1;
  optional AccountRegistered account_registered = 2;
  optional AccountSummary account_summary = 3;
  optional DeviceState device = 4;
  optional RegisterDeviceResult register_device_result = 5;
  // NOTE: don't reuse tag 6
  // bool pending_zk_nym = 6;
  optional RequestZkNymResult request_zk_nym_result = 7;
}

message GetAccountStateResponse {
  oneof result {
    AccountStateSummary account = 1;
    AccountError error = 2;
  }
}

message RefreshAccountStateResponse {}

message AccountUsages {
  repeated AccountUsage account_usages = 1;
}

message AccountUsage {
  string created_on_utc = 1;
  string last_updated_utc = 2;
  string id = 3;
  string subscription_id = 4;
  string valid_until_utc = 5;
  string valid_from_utc = 6;
  double bandwidth_allowance_gb = 7;
  double bandwidth_used_gb = 8;
}

message GetAccountUsageResponse {
  oneof result {
    AccountUsages account_usages = 1;
    AccountError error = 2;
  }
}

message ResetDeviceIdentityRequest {
  // 32 byte seed, [u8; 32]
  optional bytes seed = 1;
}

message ResetDeviceIdentityResponse {
  bool success = 1;
  AccountError error = 2;
}

message GetDeviceIdentityResponse {
  oneof id {
    string device_identity = 1;
    AccountError error = 2;
  }
}

message RegisterDeviceResponse {
  string json = 1;
  AccountError error = 2;
}

enum DeviceStatus {
  DEVICE_STATUS_UNSPECIFIED = 0;
  DEVICE_STATUS_ACTIVE = 1;
  DEVICE_STATUS_INACTIVE = 2;
  DEVICE_STATUS_DELETE_ME = 3;
}

message Device {
  string created_on_utc = 1;
  string last_updated_utc = 2;
  string device_identity_key = 3;
  DeviceStatus status = 4;
}

message Devices {
  repeated Device devices = 1;
}

message GetDevicesResponse {
  oneof result {
    Devices devices = 1;
    AccountError error = 2;
  }
}

message GetActiveDevicesResponse {
  oneof result {
    Devices devices = 1;
    AccountError error = 2;
  }
}

message RequestZkNymResponse {
  string json = 1;
  AccountError error = 2;
}

message GetDeviceZkNymsResponse {
  string json = 1;
  AccountError error = 2;
}

message GetZkNymsAvailableForDownloadResponse {
  string json = 1;
  AccountError error = 2;
}

message GetZkNymByIdRequest {
  string id = 1;
}

message GetZkNymByIdResponse {
  string json = 1;
  AccountError error = 2;
}

message ConfirmZkNymDownloadedRequest {
  string id = 1;
}

message ConfirmZkNymDownloadedResponse {
  AccountError error = 2;
}

message AvailableTickets {
  // Remaining number of mixnet entry tickets
  uint64 mixnet_entry_tickets = 1;
  // Remaining mixnet entry data in bytes
  uint64 mixnet_entry_data = 2;
  // Remaining mixnet entry data formatted to a string using SI units
  string mixnet_entry_data_si = 3;

  // Remaining number of mixnet exit tickets
  uint64 mixnet_exit_tickets = 4;
  // Remaining mixnet exit data in bytes
  uint64 mixnet_exit_data = 5;
  // Remaining mixnet exit data formatted to a string using SI units
  string mixnet_exit_data_si = 6;

  // Remaining number of vpn entry tickets
  uint64 vpn_entry_tickets = 7;
  // Remaining vpn entry data in bytes
  uint64 vpn_entry_data = 8;
  // Remaining vpn entry data formatted to a string using SI units
  string vpn_entry_data_si = 9;

  // Remaining number of vpn exit tickets
  uint64 vpn_exit_tickets = 10;
  // Remaining vpn exit data in bytes
  uint64 vpn_exit_data = 11;
  // Remaining vpn exit data formatted to a string using SI units
  string vpn_exit_data_si = 12;
}

message GetAvailableTicketsResponse {
  oneof resp {
    AvailableTickets available_tickets = 1;
    AccountError error = 2;
  }
}

message IsReadyToConnectResponse {
  enum IsReadyToConnectResponseType {
    IS_READY_TO_CONNECT_RESPONSE_TYPE_UNSPECIFIED = 0;

    // We are ready to attempt to connect
    READY = 1;

    // No account recovery phrase stored
    NO_ACCOUNT_STORED = 2;

    // The account is not synced
    ACCOUNT_NOT_SYNCED = 3;

    // The account is not registered
    ACCOUNT_NOT_REGISTERED = 4;

    // The account is not active
    ACCOUNT_NOT_ACTIVE = 5;

    // The account does not have an active subscription
    NO_ACTIVE_SUBSCRIPTION = 6;

    // The device is not registered
    DEVICE_NOT_REGISTERED = 7;

    // The device is not active
    // NOTE: in the future we will try to re-active an inactive device on
    // connect
    DEVICE_NOT_ACTIVE = 8;

    // The device has reached the maximum number of devices
    MAX_DEVICES_REACHED = 9;
  }

  IsReadyToConnectResponseType kind = 1;
}

message AccountError {
  enum AccountErrorType {
    STORE_ACCOUNT_ERROR_UNSPECIFIED = 0;

    // The provided mnemonic was not able to be parsed
    INVALID_MNEMONIC = 1;

    // General error from the storage backend
    STORAGE = 2;

    // Unable to proceed while connected
    IS_CONNECTED = 3;
  }

  AccountErrorType kind = 1;

  // Detailed error message for logging and debugging
  string message = 2;

  // Optional additional details
  map<string, string> details = 3;
}

message ConnectionData {
  Gateway entry_gateway = 1;
  Gateway exit_gateway = 2;
  google.protobuf.Timestamp connected_at = 3;
  TunnelConnectionData tunnel = 4;
}

message MixnetConnectionData {
  Address nym_address = 1;
  Address exit_ipr = 2;
  string ipv4 = 3;
  string ipv6 = 4;
}

message WireguardConnectionData {
  WireguardNode entry = 1;
  WireguardNode exit = 2;
}

message WireguardNode {
  string endpoint = 1;
  string public_key = 2;
  string private_ipv4 = 3;
  string private_ipv6 = 4;
}

message TunnelConnectionData {
  message Mixnet {
    MixnetConnectionData data = 1;
  }
  message Wireguard {
    WireguardConnectionData data = 2;
  }
  
  oneof state {
    Mixnet mixnet = 1;
    Wireguard wireguard = 2;
  }
}

message TunnelState {
  enum ErrorStateReason {
      FIREWALL = 0;
      ROUTING = 1;
      DNS = 2;
      TUN_DEVICE = 3;
      TUNNEL_PROVIDER = 4;
      SAME_ENTRY_AND_EXIT_GATEWAY = 5;
      INVALID_ENTRY_GATEWAY_COUNTRY = 6;
      INVALID_EXIT_GATEWAY_COUNTRY = 7;
      BAD_BANDWIDTH_INCREASE = 8;
      DUPLICATE_TUN_FD = 9;
      INTERNAL = 10;
  }

  enum ActionAfterDisconnect {
    NOTHING = 0;
    ERROR = 1;
    RECONNECT = 2;
    OFFLINE = 3;
  }

  message Disconnected {}
  message Connecting {
    optional ConnectionData connection_data = 1;
  }
  message Connected {
    ConnectionData connection_data = 1; 
  }
  message Disconnecting {
    ActionAfterDisconnect after_disconnect = 1;
  }
  message Error {
    ErrorStateReason reason = 1;
  }
  message Offline {
    bool reconnect = 1;
  }

  oneof state {
    Disconnected disconnected = 1;
    Connecting connecting = 2;
    Connected connected = 3;
    Disconnecting disconnecting = 4;
    Error error = 5;
    Offline offline = 6;
  }
}

message TunnelEvent {
  oneof event {
    TunnelState tunnel_state = 1;
    MixnetEvent mixnet_event = 2;
  }
}

message MixnetEvent {
  message BandwidthEvent {
    message NoBandwidth {}
    message RemainingBandwidth {
      int64 value = 1;
    }
    oneof event {
      NoBandwidth no_bandwidth = 1;
      RemainingBandwidth remaining_bandwidth = 2;
    }
  }

  enum ConnectionEvent {
    ENTRY_GATEWAY_DOWN = 0;
    EXIT_GATEWAY_DOWN_IPV4 = 1;
    EXIT_GATEWAY_DOWN_IPV6 = 2;
    EXIT_GATEWAY_ROUTING_ERROR_IPV4 = 3;
    EXIT_GATEWAY_ROUTING_ERROR_IPV6 = 4;
    CONNECTED_IPV4 = 5;
    CONNECTED_IPV6 = 6;
  }

  message SphinxPacketRates {
    double real_packets_sent = 1;
    double real_packets_sent_size = 2;
    double cover_packets_sent = 3;
    double cover_packets_sent_size = 4;

    double real_packets_received = 5;
    double real_packets_received_size = 6;
    double cover_packets_received = 7;
    double cover_packets_received_size = 8;

    double total_acks_received = 9;
    double total_acks_received_size = 10;
    double real_acks_received = 11;
    double real_acks_received_size = 12;
    double cover_acks_received = 13;
    double cover_acks_received_size = 14;

    double real_packets_queued = 15;
    double retransmissions_queued = 16;
    double reply_surbs_queued = 17;
    double additional_reply_surbs_queued = 18;
  }

  message ConnectionStatisticsEvent {
    SphinxPacketRates rates = 1;
  }

  oneof event {
    BandwidthEvent bandwidth_event = 1;
    ConnectionEvent connection_event = 2;
    ConnectionStatisticsEvent connection_statistics_event = 3;
  }
}

service NymVpnd {
  // Get info regarding the nym-vpnd in general, like version etc.
  rpc Info (google.protobuf.Empty) returns (InfoResponse) {}

  // Set the network. This requires a restart to take effect
  rpc SetNetwork (SetNetworkRequest) returns (SetNetworkResponse) {}

  // List messages fetched from nym-vpn-api
  rpc GetSystemMessages (google.protobuf.Empty) returns (GetSystemMessagesResponse) {}

  // List the feature flags fetched from the nym-vpn-api
  rpc GetFeatureFlags (google.protobuf.Empty) returns (GetFeatureFlagsResponse) {}

  // Start the tunnel and connect
  rpc VpnConnect (ConnectRequest) returns (ConnectResponse) {}

  // Disconnect and stop the tunnel
  rpc VpnDisconnect (google.protobuf.Empty) returns (DisconnectResponse) {}

  // Get the current tunnel state
  rpc GetTunnelState (google.protobuf.Empty) returns (TunnelState) {}

  // Listen for current tunnel state and subsequent changes to it. Emits current state as the first value.
  rpc ListenToTunnelState (google.protobuf.Empty) returns (stream TunnelState) {}

  /// Listen for daemon events.
  rpc ListenToEvents(google.protobuf.Empty) returns (stream TunnelEvent) {}

  // List the available gateways for the selected mode
  rpc ListGateways (ListGatewaysRequest) returns (ListGatewaysResponse) {}

  // List the available countries for the selected mode
  rpc ListCountries (ListCountriesRequest) returns (ListCountriesResponse) {}

  // -- Unstable --
  // These below are considered unstable, in the sense that their definitions
  // are still being integrated upon and their meaning might change

  // Store the recovery phrase, which is also the account identity and authentication
  rpc StoreAccount (StoreAccountRequest) returns (StoreAccountResponse) {}

  // Check if the recovery phrase is stored
  rpc IsAccountStored (google.protobuf.Empty) returns (IsAccountStoredResponse) {}

  // Removes everything related to the account, including the device identity,
  // credential storage, mixnet keys, gateway registrations.
  rpc ForgetAccount (google.protobuf.Empty) returns (ForgetAccountResponse) {}

  // Get the account identity of the locally stored recovery phrase
  rpc GetAccountIdentity (google.protobuf.Empty) returns (GetAccountIdentityResponse) {}

  // Get the set of account links for the user
  rpc GetAccountLinks (GetAccountLinksRequest) returns (GetAccountLinksResponse) {}

  // Query the account state, which is synced from the nym-vpn-api account, as it
  // is known and interpreted by nym-vpnd
  rpc GetAccountState (google.protobuf.Empty) returns (GetAccountStateResponse) {}

  // The vpn client will periodically refresh the account state in the
  // background. This command triggers a manual refresh.
  rpc RefreshAccountState (google.protobuf.Empty) returns (RefreshAccountStateResponse) {}

  // Get the account usage from the nym-vpn-api
  rpc GetAccountUsage (google.protobuf.Empty) returns (GetAccountUsageResponse) {}

  // Check if the local account state is ready to connect
  rpc IsReadyToConnect (google.protobuf.Empty) returns (IsReadyToConnectResponse) {}

  // Reset the device identity
  rpc ResetDeviceIdentity (ResetDeviceIdentityRequest) returns (ResetDeviceIdentityResponse) {}

  // Get the device identity
  rpc GetDeviceIdentity (google.protobuf.Empty) returns (GetDeviceIdentityResponse) {}

  // Try to register the local device with the nym-vpn-api
  rpc RegisterDevice (google.protobuf.Empty) returns (RegisterDeviceResponse) {}

  // Get the list of devices associated with this account from the nym-vpn-api
  rpc GetDevices (google.protobuf.Empty) returns (GetDevicesResponse) {}

  // Get the list of active devices associated with this account from the nym-vpn-api
  rpc GetActiveDevices (google.protobuf.Empty) returns (GetActiveDevicesResponse) {}

  // Request new zk-nyms (ticketbooks) from the nym-vpn-api
  rpc RequestZkNym (google.protobuf.Empty) returns (RequestZkNymResponse) {}

  // List the zk-nyms associated with this device from the nym-vpn-api
  rpc GetDeviceZkNyms (google.protobuf.Empty) returns (GetDeviceZkNymsResponse) {}

  // List the zk-nyms available for download from the nym-vpn-api
  rpc GetZkNymsAvailableForDownload (google.protobuf.Empty) returns (GetZkNymsAvailableForDownloadResponse) {}

  // Get a zk-nym by its id from the nym-vpn-api
  rpc GetZkNymById (GetZkNymByIdRequest) returns (GetZkNymByIdResponse) {}

  // Confirm that a zk-nym has been downloaded from the nym-vpn-api
  rpc ConfirmZkNymDownloaded (ConfirmZkNymDownloadedRequest) returns (ConfirmZkNymDownloadedResponse) {}

  // Get the available tickets in the local credential store
  rpc GetAvailableTickets (google.protobuf.Empty) returns (GetAvailableTicketsResponse) {}
}

